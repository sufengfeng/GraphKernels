from BasicDataSet import BasicDataSet
from fandedge import FindBestMatchAdvance
from points_compare import GetPonints2DistanceList

TestPointData = [

    # 1.
    [[271.8446960449219, 672.8156127929688],

     [185.53399658203125, 487.2815856933594],

     [331.6505126953125, 170.58251953125],

     [532.8156127929688, 812.135986328125],

     [532.1359252929688, 371.74761962890625]
     ],

    # 2.
    [[224.27188110351562, 697.961181640625],

     [513.7864990234375, 616.4078979492188],

     [657.1845092773438, 479.80584716796875],

     [366.3106994628906, 312.62139892578125],

     [697.2816772460938, 228.34954833984375]
     ],
    # 3.
    [[390.09710693359375, 667.3787231445312],
     [477.08746337890625, 398.2524719238281],
     [223.59225463867188, 558.6408081054688],
     [675.5339965820312, 294.2718811035156],
     [682.330078125, 725.8253784179688]
     ],

    # 4.
    [[200.48545837402344, 551.1650390625],

     [581.0679931640625, 422.71844482421875],

     [574.9514770507812, 681.6505737304688],

     [302.42718505859375, 286.1165466308594],

     [646.9903564453125, 188.9320526123047]
     ],
    # 5.
    [[477.7669982910156, 358.8349914550781],

     [545.048583984375, 762.5242919921875],

     [697.961181640625, 586.5048828125],

     [259.6116638183594, 651.0679931640625],

     [304.4660339355469, 210.00003051757812
      ]],
    # 6.
    [
        [233.10682678222656, 248.73788452148438],
        [355.4369201660156, 481.1650695800781],
        [492.7185363769531, 781.553466796875],
        [220.1942138671875, 709.5147094726562],
        [725.1456909179688, 303.7864685058594]
    ],
    # 7.
    [[655.8253173828125, 445.82525634765625],

     [219.51458740234375, 590.58251953125],

     [412.5242919921875, 702.718505859375],

     [214.75730895996094, 231.06796264648438],

     [683.6893920898438, 240.58253479003906]
     ],
    # 8.
    [[369.0291748046875, 726.5049438476562],

     [625.2427978515625, 405.72821044921875],

     [632.718505859375, 619.1262817382812],

     [177.37867736816406, 568.8350219726562],

     [281.3592529296875, 186.8932342529297]
     ],
    # 9.
    [[195.7281951904297, 316.0194396972656],
     [662.6213989257812, 466.2136535644531],
     [338.4466552734375, 538.93212890625],
     [489.3204040527344, 292.2330322265625],
     [564.0777587890625, 761.1651000976562]
     ],

    # 10.
    [
        [542.3302001953125, 533.4951782226562],
        [262.33013916015625, 430.8738708496094],
        [305.8253173828125, 647.669921875],
        [456.0194396972656, 174.6602020263672],
        [651.0679931640625, 246.69903564453125]
    ],
    # 11.
    [
        [365.6310729980469, 685.728271484375],
        [470.2912902832031, 219.51458740234375],
        [689.126220703125, 176.01943969726562],
        [177.37867736816406, 508.3495178222656],
        [567.4757690429688, 540.970947265625]
    ],
    # 12.
    [[305.1456604003906, 539.6116943359375],
     [130.48545837402344, 635.43701171875],
     [402.3301696777344, 288.8349609375],
     [632.718505859375, 391.4563903808594],
     [513.7864990234375, 716.9903564453125]

     ],
    # 13.
    [[624.5631713867188, 801.9418334960938],
     [627.2815551757812, 582.4271850585938],
     [377.18450927734375, 691.8446655273438],
     [127.0873794555664, 506.3106994628906],
     [464.8544006347656, 296.3106994628906]
     ],
    # 14.
    [[347.2815856933594, 749.6117553710938],
     [451.9418029785156, 488.6407775878906],
     [595.33984375, 272.5242919921875],
     [173.98060607910156, 364.27191162109375],
     [161.06796264648438, 583.7864990234375]
     ],

    # 15.
    [[670.7767333984375, 712.2330932617188],
     [461.4563903808594, 365.6310729980469],
     [654.4661254882812, 214.07769775390625],
     [173.98060607910156, 490.67962646484375],
     [384.66021728515625, 617.08740234375]
     ],
    # 16.

    [[374.4660339355469, 513.1068115234375],
     [130.48545837402344, 313.9805908203125],
     [636.1165771484375, 449.22332763671875],
     [571.5534057617188, 699.3204345703125],
     [277.961181640625, 702.0389404296875]
     ],
    # 17.

    [[251.45632934570312, 381.26214599609375],

     [275.92236328125, 663.301025390625],

     [464.8544006347656, 651.74755859375],

     [494.7573547363281, 239.90292358398438],

     [712.9126586914062, 450.5825500488281]
     ],
    # 18.
    [
        [148.1553497314453, 608.25244140625],

        [350.67962646484375, 581.7476806640625],

        [284.75732421875, 334.3689880371094],

        [639.5145874023438, 340.4854736328125],

        [655.8253173828125, 662.6213989257812]
    ],

    # 19.
    [[560.6796264648438, 546.4078369140625],

     [568.1553955078125, 759.8058471679688],

     [207.2815704345703, 647.669921875],

     [413.20391845703125, 240.58253479003906],

     [685.728271484375, 271.16510009765625]
     ],
    # 20.
    [[277.961181640625, 692.5243530273438],

     [432.9126892089844, 478.4466552734375],

     [171.94178771972656, 228.34954833984375],

     [580.388427734375, 277.2815856933594],

     [695.9224243164062, 494.7573547363281]
     ]]

if __name__ == "__main__":

    testPointList = []

    for j in range(len(TestPointData)):
        pointsList = TestPointData[j]
        distanceList = GetPonints2DistanceList(pointsList)
        testPointList.append(distanceList)
    print(testPointList)

    basicPointList = []

    for j in range(len(BasicDataSet)):
        pointsList = BasicDataSet[j]
        distanceList = GetPonints2DistanceList(pointsList)
        basicPointList.append(distanceList)
    print(basicPointList)

    print("************************************************************************************************************")
    for i in range(len(testPointList)):
        print('*********************************    %d   **********************************' % (i % 10))
        for j in range(len(basicPointList)):
            print('Test_Num%dä¸ŽBasic_Num%d:%d' % (i, j, FindBestMatchAdvance(testPointList[i], basicPointList[j])))
